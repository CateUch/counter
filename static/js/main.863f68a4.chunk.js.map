{"version":3,"sources":["style/App.module.css","style/Input.module.css","components/common/Input.tsx","components/common/Button.tsx","store/counterReducer.ts","components/CounterSetting/CounterSetting.tsx","components/CounterDisplay/CounterDisplay.tsx","App.tsx","store/store.ts","reportWebVitals.ts","index.tsx","style/counter.module.css"],"names":["module","exports","Input","props","error","title","value","onChange","className","style","error_Input","type","Button","ACTION_TYPES","restProps","button","InitialState","counterIsActive","counterMaxValue","Number","localStorage","getItem","counterStartValue","actionCreators","RESET","INCREMENT","UPD_MAX_VALUE","UPD_MIN_VALUE","startValue","SET_VALUES","CounterSetting","dispatch","useDispatch","useSelector","state","counter","counterWrapper","counterDisplay","e","curValue","currentTarget","counterBottom","onClick","disabled","CounterDisplay","incButtonHandler","recButtonHandler","text","App","useState","setText","useEffect","app","console","log","rootReducer","combineReducers","action","copyState","newValue","setItem","toString","store","createStore","window","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"gGACAA,EAAOC,QAAU,CAAC,IAAM,mB,mBCAxBD,EAAOC,QAAU,CAAC,YAAc,6B,4JC0BjBC,MAff,SAAeC,GAAwB,IAE3BC,EAAgDD,EAAhDC,MAAOC,EAAyCF,EAAzCE,MAAOC,EAAkCH,EAAlCG,MAAOC,EAA2BJ,EAA3BI,SAE7B,OAJkC,YAEsBJ,EAFtB,sCAK9B,kCACKE,EACD,uBAAOG,UAAWJ,EAAQK,IAAMC,YAAc,GAC1CC,KAAK,SACLL,MAAOA,EACPC,SAAUA,Q,wBCNXK,ICPHC,EDOGD,EARf,SAAgBT,GAA0B,IAE9BE,EAAwBF,EAAxBE,MAAUS,EAFmB,YAELX,EAFK,WAIrC,OAAO,gDAAQK,UAAWC,IAAMM,QAAYD,GAArC,aACFT,M,uBCXHW,EAAe,CACjBV,MAAO,EACPF,OAAO,EACPa,iBAAiB,EACjBC,gBAAiBC,OAAOC,aAAaC,QAAQ,cAAgB,EAC7DC,kBAAmBH,OAAOC,aAAaC,QAAQ,gBAAkB,I,SAEzDR,K,cAAAA,E,sBAAAA,E,wBAAAA,E,8BAAAA,E,+BAAAA,M,KAQL,IAwDMU,EACA,iBAAO,CAAEZ,KAAME,EAAaW,QAD5BD,EAEI,iBAAO,CAAEZ,KAAME,EAAaY,YAFhCF,EAGM,SAACjB,GAAD,MAAoB,CAAEK,KAAME,EAAaa,cAAepB,UAH9DiB,EAIM,SAACjB,GAAD,MAAoB,CAAEK,KAAME,EAAac,cAAerB,UAJ9DiB,EAKI,SAACK,GAAD,MAAyB,CAAEjB,KAAME,EAAagB,WAAYD,eC1B5DE,MA1Cf,WAEI,IAAMC,EAAWC,cAFK,EAGiCC,aAAY,SAACC,GAAD,OAA0BA,EAAMC,WAA3Fb,EAHc,EAGdA,kBAAmBJ,EAHL,EAGKA,gBAAkBd,EAHvB,EAGuBA,MAe7C,OACI,mCACI,sBAAKI,UAAWC,IAAM2B,eAAtB,UACI,sBAAK5B,UAAWC,IAAM4B,eAAtB,UACI,cAAC,EAAD,CAAOhC,MAAM,aACTC,MAAOY,EACPX,SAAU,SAAC+B,GAnB/B,IAAoBC,IAmB6DD,EAAEE,cAAclC,MAlB7FyB,EAASR,EAA6BJ,OAAOoB,MAmB7BnC,MAAOA,IACX,cAAC,EAAD,CAAOC,MAAM,aACTC,MAAOgB,EACPf,SAAU,SAAC+B,GAnB/B,IAAsBC,IAmB6DD,EAAEE,cAAclC,MAlB/FyB,EAASR,EAA6BJ,OAAOoB,MAmB7BnC,MAAOA,OAEf,qBAAKI,UAAWC,IAAMgC,cAAtB,SACI,cAAC,EAAD,CAAQpC,MAAO,MACXqC,QApBA,WAEhBX,EAASR,EADGD,KAoBIqB,SAAUvC,YCpCnB,SAASwC,EAAezC,GAAmB,IAEhD0C,EAA6C1C,EAA7C0C,iBAAkBC,EAA2B3C,EAA3B2C,iBAAkBC,EAAS5C,EAAT4C,KAFW,EAGId,aAAY,SAACC,GAAD,OAA0BA,EAAMC,WAA/FjB,EAH+C,EAG/CA,gBAAiBZ,EAH8B,EAG9BA,MAAOW,EAHuB,EAGvBA,gBAAiBb,EAHM,EAGNA,MAEjD,OACE,mCACE,sBAAKI,UAAWC,IAAM2B,eAAtB,UACE,qBAAK5B,UAAWC,IAAM4B,eAAtB,SACGpB,EAAkBX,EAAQyC,IAE7B,sBAAKvC,UAAWC,IAAMgC,cAAtB,UAEE,cAAC,EAAD,CAAQpC,MAAO,MACbqC,QAASG,EACTF,WAAWrC,IAAUY,IAAmBd,IAA6B,IAApBa,KAEnD,cAAC,EAAD,CAAQZ,MAAO,QACbqC,QAASI,EACTH,WAAWrC,IAAUY,IAAmBd,aCcrC4C,MAhCf,WAEE,IAAMjB,EAAWC,cAFJ,EAGWiB,mBAAS,IAHpB,mBAGNF,EAHM,KAGAG,EAHA,KAKL9C,EAAU6B,aAAY,SAACC,GAAD,OAA0BA,EAAMC,WAAtD/B,MAiBR,OAfA+C,qBAAU,WACED,EAAT9C,EAAiB,iBAA4B,gCAC/C,CAACA,IAcA,sBAAKI,UAAWC,IAAM2C,IAAtB,UACC,cAAC,EAAD,IACA,cAACR,EAAD,CAAgBG,KAAMA,EACXF,iBAfS,WACrBd,EAASR,KACT8B,QAAQC,IAAI,kBAcAR,iBAXS,WACrBf,EAASR,KACT8B,QAAQC,IAAI,oB,uBCvBVC,EAAcC,YAAgB,CAChCrB,QJY0B,WAAoF,IAAnFD,EAAkF,uDAAxDlB,EAAcyC,EAA0C,uCAE7G,OAAQA,EAAO9C,MAEX,KAAKE,EAAaW,MACd,IAAIkC,EAAS,eAAQxB,GAErB,OADAwB,EAAUpD,MAAQ,EACXoD,EAGX,KAAK7C,EAAaY,UACd,IAAIkC,GAAYzB,EAAM5B,MACtB,OAAO,2BACA4B,GADP,IAEI5B,MAAOqD,EAAW,IAG1B,KAAK9C,EAAaa,cACd,IAAIgC,EAAS,eAAQxB,GAKrB,OAJKuB,EAAOnD,OAAS4B,EAAMZ,mBAAsBmC,EAAOnD,OAAS,GAC7DoD,EAAUtD,OAAQ,EAClBsD,EAAUzC,iBAAkB,GACzByC,EAAUtD,OAAQ,EAClB,2BACAsD,GADP,IAEIxC,gBAAiBuC,EAAOnD,QAIhC,KAAKO,EAAac,cACd,IAAI+B,EAAS,eAAQxB,GAKrB,OAJKuB,EAAOnD,OAAS4B,EAAMhB,iBAAoBuC,EAAOnD,MAAQ,GAC1DoD,EAAUtD,OAAQ,EAClBsD,EAAUzC,iBAAkB,GACzByC,EAAUtD,OAAQ,EAClB,2BACAsD,GADP,IAEIpC,kBAAmBmC,EAAOnD,QAIlC,KAAKO,EAAagB,WACd,IAAI6B,EAAS,eAAQxB,GAIrB,OAHAwB,EAAUpD,MAAQmD,EAAO7B,WACzBR,aAAawC,QAAQ,WAAY1B,EAAMhB,gBAAgB2C,YACvDzC,aAAawC,QAAQ,aAAc1B,EAAMZ,kBAAkBuC,YACpD,2BACAH,GADP,IAEIzC,iBAAiB,IAGzB,QACI,OAAOiB,MI7DN4B,EAAQC,YAAYR,GAKjCS,OAAOF,MAAQA,ECXf,IAYeG,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCCdQ,IAASC,OACP,cAAC,IAAD,CAAUb,MAAOA,EAAjB,SACE,cAAC,EAAD,MAEFc,SAASC,eAAe,SAM1BZ,K,kBCnBAjE,EAAOC,QAAU,CAAC,eAAiB,gCAAgC,eAAiB,gCAAgC,YAAc,6BAA6B,cAAgB,kC","file":"static/js/main.863f68a4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__1kcXZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"error_Input\":\"Input_error_Input__35gSK\"};","import { ChangeEvent, DetailedHTMLProps, InputHTMLAttributes } from 'react';\r\nimport style from './../../style/Input.module.css'\r\n\r\n\r\nexport type PropsInputType =\r\n    DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\r\n    & {\r\n        value: string | number,\r\n        onChange: (e: ChangeEvent<HTMLInputElement>) => void,\r\n        error?: boolean\r\n    };\r\n\r\nfunction Input(props: PropsInputType) {\r\n\r\n    const { error, title, value, onChange, ...restProps } = props;\r\n\r\n    return (\r\n        <label>\r\n            {title}\r\n            <input className={error ? style.error_Input : ''}\r\n                type='number'\r\n                value={value}\r\n                onChange={onChange} />\r\n        </label>\r\n    )\r\n}\r\n\r\nexport default Input;\r\n","import { ButtonHTMLAttributes, DetailedHTMLProps } from 'react';\r\nimport style from './../../style/Button.module.css'\r\n\r\nexport type ReactButtonProps = DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>\r\n    & {\r\n        title: string,\r\n    }\r\n\r\nfunction Button(props: ReactButtonProps) {\r\n\r\n    const { title, ...restProps } = props;\r\n\r\n    return <button className={style.button} {...restProps}>\r\n        {title}\r\n    </button>\r\n}\r\nexport default Button; ","\r\n\r\nconst InitialState = {\r\n    value: 0,\r\n    error: false,\r\n    counterIsActive: false,\r\n    counterMaxValue: Number(localStorage.getItem(\"maxValue\")) || 1,\r\n    counterStartValue: Number(localStorage.getItem(\"startValue\")) || 0,\r\n}\r\nexport enum ACTION_TYPES {\r\n    RESET = 'RESET',\r\n    INCREMENT = 'INCREMENT',\r\n    SET_VALUES = 'SET_VALUES',\r\n    UPD_MAX_VALUE = 'UPD_MAX_VALUE',\r\n    UPD_MIN_VALUE = 'UPD_MIN_VALUE',\r\n}\r\n\r\nexport const counterReducer = (state: InitialStateType = InitialState, action: ActionTypes): InitialStateType => {\r\n\r\n    switch (action.type) {\r\n\r\n        case ACTION_TYPES.RESET: {\r\n            let copyState = { ...state }\r\n            copyState.value = 0\r\n            return copyState\r\n        };\r\n\r\n        case ACTION_TYPES.INCREMENT:\r\n            let newValue = +state.value;\r\n            return {\r\n                ...state,\r\n                value: newValue + 1\r\n            };\r\n\r\n        case ACTION_TYPES.UPD_MAX_VALUE: {\r\n            let copyState = { ...state }\r\n            if ((action.value <= state.counterStartValue) || action.value <= 0) {\r\n                copyState.error = true;\r\n                copyState.counterIsActive = false;\r\n            } else copyState.error = false;\r\n            return {\r\n                ...copyState,\r\n                counterMaxValue: action.value,\r\n            }\r\n        };\r\n\r\n        case ACTION_TYPES.UPD_MIN_VALUE: {\r\n            let copyState = { ...state }\r\n            if ((action.value >= state.counterMaxValue) || action.value < 0) {\r\n                copyState.error = true;\r\n                copyState.counterIsActive = false;\r\n            } else copyState.error = false;\r\n            return {\r\n                ...copyState,\r\n                counterStartValue: action.value,\r\n            }\r\n        };\r\n\r\n        case ACTION_TYPES.SET_VALUES:\r\n            let copyState = { ...state };\r\n            copyState.value = action.startValue;\r\n            localStorage.setItem('maxValue', state.counterMaxValue.toString());\r\n            localStorage.setItem('startValue', state.counterStartValue.toString());\r\n            return {\r\n                ...copyState,\r\n                counterIsActive: true\r\n            };\r\n            \r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const actionCreators = {\r\n    ResetAC: () => ({ type: ACTION_TYPES.RESET } as const),\r\n    IncrementAC: () => ({ type: ACTION_TYPES.INCREMENT } as const),\r\n    UpdMaxValueAC: (value: number) => ({ type: ACTION_TYPES.UPD_MAX_VALUE, value } as const),\r\n    UpdMinValueAC: (value: number) => ({ type: ACTION_TYPES.UPD_MIN_VALUE, value } as const),\r\n    SetValuesAC: (startValue: number) => ({ type: ACTION_TYPES.SET_VALUES, startValue } as const),\r\n}\r\n\r\n//types\r\nexport type InitialStateType = {\r\n    error: boolean,\r\n    value: number | string,\r\n    counterMaxValue: number,\r\n    counterIsActive: boolean,\r\n    counterStartValue: number,\r\n}\r\n\r\nexport type ActionTypes =\r\n    | ReturnType<typeof actionCreators.ResetAC>\r\n    | ReturnType<typeof actionCreators.SetValuesAC>\r\n    | ReturnType<typeof actionCreators.IncrementAC>\r\n    | ReturnType<typeof actionCreators.UpdMaxValueAC>\r\n    | ReturnType<typeof actionCreators.UpdMinValueAC>\r\n","\r\nimport Input from '../common/Input';\r\nimport Button from '../common/Button';\r\nimport { RootStateType } from '../../store/store';\r\nimport style from './../../style/counter.module.css';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { actionCreators } from '../../store/counterReducer';\r\nimport React, { ChangeEvent, } from 'react';\r\n\r\n\r\nfunction CounterSetting() {\r\n\r\n    const dispatch = useDispatch();\r\n    const { counterStartValue, counterMaxValue,  error } = useSelector((state: RootStateType) => state.counter);\r\n\r\n    function onmaxValue(curValue: string) {\r\n        dispatch(actionCreators.UpdMaxValueAC(Number(curValue)));\r\n    };\r\n\r\n    function onstartValue(curValue: string) {\r\n        dispatch(actionCreators.UpdMinValueAC(Number(curValue)));\r\n    };\r\n\r\n    const onSetValues = () => {\r\n        let value = counterStartValue;\r\n        dispatch(actionCreators.SetValuesAC(value));\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <div className={style.counterWrapper}>\r\n                <div className={style.counterDisplay}>\r\n                    <Input title='max value:'\r\n                        value={counterMaxValue}\r\n                        onChange={(e: ChangeEvent<HTMLInputElement>) => { onmaxValue(e.currentTarget.value) }}\r\n                        error={error} />\r\n                    <Input title='max value:'\r\n                        value={counterStartValue}\r\n                        onChange={(e: ChangeEvent<HTMLInputElement>) => { onstartValue(e.currentTarget.value) }}\r\n                        error={error} />\r\n                </div>\r\n                <div className={style.counterBottom}>\r\n                    <Button title={'SET'}\r\n                        onClick={onSetValues}\r\n                        disabled={error} />\r\n                </div>\r\n            </div>\r\n            \r\n        </>\r\n    )\r\n};\r\n\r\nexport default CounterSetting; \r\n","\r\nimport React from 'react';\r\nimport Button from '../common/Button';\r\nimport { useSelector } from 'react-redux';\r\nimport { RootStateType } from '../../store/store';\r\nimport style from './../../style/counter.module.css';\r\n\r\n\r\nexport default function CounterDisplay(props: PropsType) {\r\n\r\n  const { incButtonHandler, recButtonHandler, text } = props\r\n  const { counterMaxValue, value, counterIsActive, error } = useSelector((state: RootStateType) => state.counter)\r\n\r\n  return (\r\n    <>\r\n      <div className={style.counterWrapper} >\r\n        <div className={style.counterDisplay}>\r\n          {counterIsActive ? value : text}\r\n        </div>\r\n        <div className={style.counterBottom}>\r\n\r\n          <Button title={'INC'}\r\n            onClick={incButtonHandler}\r\n            disabled={(value === counterMaxValue || error || counterIsActive === false ? true : false)} />\r\n\r\n          <Button title={'RESET'}\r\n            onClick={recButtonHandler}\r\n            disabled={(value !== counterMaxValue || error ? true : false)} />\r\n        </div>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\n\r\n//types\r\nexport type PropsType = {\r\n  text: string,\r\n  incButtonHandler: () => void,\r\n  recButtonHandler: () => void,\r\n}\r\n","import React, { useEffect, useState } from 'react';\nimport style from './style/App.module.css';\n\nimport CounterSetting from './components/CounterSetting/CounterSetting';\nimport CounterDisplay from './components/CounterDisplay/CounterDisplay';\nimport { actionCreators } from './store/counterReducer';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { RootStateType } from './store/store';\n\nfunction App() {\n\n  const dispatch = useDispatch();\n  const [text, setText] = useState('');\n\n  const { error } = useSelector((state: RootStateType) => state.counter)\n\n  useEffect(() => {\n    (error) ? setText('Invalid values') : setText('enter values & press \"set\"')\n}, [error]);\n\nconst incButtonHandler = () => {\n    dispatch(actionCreators.IncrementAC())\n    console.log('increment tab')\n};\n\nconst recButtonHandler = () => {\n    dispatch(actionCreators.ResetAC())\n    console.log('reset tab')\n};\n\n\n  return (\n    <div className={style.app}>\n     <CounterSetting/>\n     <CounterDisplay text={text}\n                incButtonHandler={incButtonHandler}\n                recButtonHandler={recButtonHandler} />\n     </div>\n  );\n}\n\nexport default App;\n","import {createStore, combineReducers} from 'redux';\r\nimport { counterReducer } from './counterReducer';\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    counter: counterReducer\r\n });\r\n\r\nexport const store = createStore(rootReducer);\r\n\r\nexport type RootStateType = ReturnType<typeof rootReducer>;\r\n\r\n // @ts-ignore\r\nwindow.store = store","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import './index.css';\nimport App from './App';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { store } from './store/store';\nimport { Provider } from 'react-redux';\nimport reportWebVitals from './reportWebVitals';\n\n\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"counterWrapper\":\"counter_counterWrapper__3cPUJ\",\"counterDisplay\":\"counter_counterDisplay__f1vrG\",\"error_Input\":\"counter_error_Input__DSqtZ\",\"counterBottom\":\"counter_counterBottom__PBHHG\"};"],"sourceRoot":""}