{"version":3,"sources":["style/Input.module.css","style/App.module.css","style/Button.module.css","store/counterReducer.ts","components/common/Input.tsx","components/common/Button.tsx","components/CounterSetting/CounterSetting.tsx","components/CounterDisplay/CounterDisplay.tsx","App.tsx","store/store.ts","utils/localStorage.ts","index.tsx","style/counter.module.css"],"names":["module","exports","ACTION_TYPES","InitialState","value","error","counterIsActive","counterMaxValue","counterStartValue","actionCreators","type","RESET","INCREMENT","UPD_MAX_VALUE","UPD_MIN_VALUE","startValue","SET_VALUES","Input","props","title","onChange","className","style","errorInput","input","Button","restProps","button","CounterSetting","dispatch","useDispatch","useSelector","state","counter","window1st","counterDisplay","e","curValue","currentTarget","Number","counterBottom","onClick","disabled","CounterDisplay","incButtonHandler","recButtonHandler","text","window2nd","counterDisplayError","App","useState","setText","useEffect","app","console","log","rootReducer","combineReducers","action","newValue","copyState","store","createStore","serializedState","localStorage","getItem","JSON","parse","err","loadState","subscribe","stringify","setItem","saveState","getState","window","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.063ae043.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"errorInput\":\"Input_errorInput__em5Xb\",\"input\":\"Input_input__1xm8p\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__1kcXZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__UHRJa\"};","\r\n\r\nconst InitialState = {\r\n    value: 0,\r\n    error: false,\r\n    counterIsActive: false,\r\n    counterMaxValue: 1,\r\n    counterStartValue: 0,\r\n}\r\nexport enum ACTION_TYPES {\r\n    RESET = 'RESET',\r\n    INCREMENT = 'INCREMENT',\r\n    SET_VALUES = 'SET_VALUES',\r\n    UPD_MAX_VALUE = 'UPD_MAX_VALUE',\r\n    UPD_MIN_VALUE = 'UPD_MIN_VALUE',\r\n}\r\n\r\nexport const counterReducer = (state: InitialStateType = InitialState, action: ActionTypes): InitialStateType => {\r\n\r\n    switch (action.type) {\r\n\r\n        case ACTION_TYPES.RESET: {\r\n            let copyState = InitialState\r\n            \r\n            return copyState\r\n        };\r\n        case ACTION_TYPES.INCREMENT:\r\n            let newValue = +state.value;\r\n            return {\r\n                ...state,\r\n                value: newValue + 1\r\n            };\r\n\r\n        case ACTION_TYPES.UPD_MAX_VALUE: {\r\n            let copyState = { ...state }\r\n            if ((action.value <= state.counterStartValue) || action.value <= 0) {\r\n                copyState.error = true;\r\n                copyState.counterIsActive = false;\r\n            } else copyState.error = false;\r\n            return {\r\n                ...copyState,\r\n                counterMaxValue: action.value,\r\n            }\r\n        };\r\n\r\n        case ACTION_TYPES.UPD_MIN_VALUE: {\r\n            let copyState = { ...state }\r\n            if ((action.value >= state.counterMaxValue) || action.value < 0) {\r\n                copyState.error = true;\r\n                copyState.counterIsActive = false;\r\n            } else copyState.error = false;\r\n            return {\r\n                ...copyState,\r\n                counterStartValue: action.value,\r\n            }\r\n        };\r\n\r\n        case ACTION_TYPES.SET_VALUES:\r\n            let copyState = { ...state };\r\n            copyState.value = action.startValue;\r\n            return {\r\n                ...copyState,\r\n                counterIsActive: true\r\n            };\r\n            \r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const actionCreators = {\r\n    ResetAC: () => ({ type: ACTION_TYPES.RESET } as const),\r\n    IncrementAC: () => ({ type: ACTION_TYPES.INCREMENT } as const),\r\n    UpdMaxValueAC: (value: number) => ({ type: ACTION_TYPES.UPD_MAX_VALUE, value } as const),\r\n    UpdMinValueAC: (value: number) => ({ type: ACTION_TYPES.UPD_MIN_VALUE, value } as const),\r\n    SetValuesAC: (startValue: number) => ({ type: ACTION_TYPES.SET_VALUES, startValue } as const),\r\n}\r\n\r\n//types\r\nexport type InitialStateType = {\r\n    error: boolean,\r\n    value: number | string,\r\n    counterMaxValue: number,\r\n    counterIsActive: boolean,\r\n    counterStartValue: number,\r\n}\r\n\r\nexport type ActionTypes =\r\n    | ReturnType<typeof actionCreators.ResetAC>\r\n    | ReturnType<typeof actionCreators.SetValuesAC>\r\n    | ReturnType<typeof actionCreators.IncrementAC>\r\n    | ReturnType<typeof actionCreators.UpdMaxValueAC>\r\n    | ReturnType<typeof actionCreators.UpdMinValueAC>\r\n","import { ChangeEvent, DetailedHTMLProps, InputHTMLAttributes } from 'react';\r\nimport style from './../../style/Input.module.css'\r\n\r\n\r\nexport type PropsInputType =\r\n    DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\r\n    & {\r\n        value: string | number,\r\n        onChange: (e: ChangeEvent<HTMLInputElement>) => void,\r\n        error?: boolean\r\n    };\r\n\r\nfunction Input(props: PropsInputType) {\r\n\r\n    const { error, title, value, onChange, ...restProps } = props;\r\n\r\n    return (\r\n        <label>\r\n            {title}\r\n            <input className={error ? style.errorInput : style.input}\r\n                type='number'\r\n                value={value}\r\n                onChange={onChange} />\r\n        </label>\r\n    )\r\n}\r\n\r\nexport default Input;\r\n","import { ButtonHTMLAttributes, DetailedHTMLProps } from 'react';\r\nimport style from './../../style/Button.module.css'\r\n\r\nexport type ReactButtonProps = DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>\r\n    & {\r\n        title: string,\r\n    }\r\n\r\nfunction Button(props: ReactButtonProps) {\r\n\r\n    const { title, ...restProps } = props;\r\n\r\n    return <button className={style.button} {...restProps}>\r\n        {title}\r\n    </button>\r\n}\r\nexport default Button; ","import Input from '../common/Input';\r\nimport Button from '../common/Button';\r\nimport React, { ChangeEvent, } from 'react';\r\nimport { RootStateType } from '../../store/store';\r\nimport style from './../../style/counter.module.css';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { actionCreators } from '../../store/counterReducer';\r\n\r\n\r\n\r\nfunction CounterSetting() {\r\n\r\n    const dispatch = useDispatch();\r\n    const { counterStartValue, counterMaxValue, error} = useSelector((state: RootStateType) => state.counter);\r\n\r\n    function onmaxValue(curValue: string) {\r\n        dispatch(actionCreators.UpdMaxValueAC(Number(curValue)));\r\n    };\r\n\r\n    function onstartValue(curValue: string) {\r\n        dispatch(actionCreators.UpdMinValueAC(Number(curValue)));\r\n    };\r\n\r\n    const onSetValues = () => {\r\n        let value = counterStartValue;\r\n        dispatch(actionCreators.SetValuesAC(value));\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <div className={style.window1st}>\r\n                <div className={style.counterDisplay}>\r\n                    <Input title='max value: '\r\n                        value={counterMaxValue}\r\n                        onChange={(e: ChangeEvent<HTMLInputElement>) => { onmaxValue(e.currentTarget.value) }}\r\n                        error={error} />\r\n                    <Input title='max value: '\r\n                        value={counterStartValue }\r\n                        onChange={(e: ChangeEvent<HTMLInputElement>) => { onstartValue(e.currentTarget.value) }}\r\n                        error={error} />\r\n                </div>\r\n                <div className={style.counterBottom}>\r\n                    <Button title={'SET'}\r\n                        onClick={onSetValues}\r\n                        disabled={error} />\r\n                </div>\r\n            </div>\r\n\r\n        </>\r\n    )\r\n};\r\n\r\nexport default CounterSetting; \r\n","\r\nimport React from 'react';\r\nimport Button from '../common/Button';\r\nimport { useSelector } from 'react-redux';\r\nimport { RootStateType } from '../../store/store';\r\nimport style from './../../style/counter.module.css';\r\n\r\n\r\nexport default function CounterDisplay(props: PropsType) {\r\n\r\n  const { incButtonHandler, recButtonHandler, text } = props\r\n  const { counterMaxValue, value, counterIsActive, error } = useSelector((state: RootStateType) => state.counter)\r\n\r\n  return (\r\n    <>\r\n      <div className={style.window2nd} >\r\n        <div className={(error || value === counterMaxValue) ? style.counterDisplayError : style.counterDisplay}>\r\n          {counterIsActive ? value : text}\r\n        </div>\r\n        <div className={style.counterBottom}>\r\n\r\n          <Button title={'INC'}\r\n            onClick={incButtonHandler}\r\n            disabled={(value === counterMaxValue || error || counterIsActive === false ? true : false)} />\r\n\r\n          <Button title={'RESET'}\r\n            onClick={recButtonHandler}\r\n            disabled={(value !== counterMaxValue || error ? true : false)} />\r\n        </div>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\n\r\n//types\r\nexport type PropsType = {\r\n  text: string,\r\n  incButtonHandler: () => void,\r\n  recButtonHandler: () => void,\r\n}\r\n","\nimport style from './style/App.module.css';\nimport { RootStateType } from './store/store';\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { actionCreators, InitialStateType } from './store/counterReducer';\nimport CounterSetting from './components/CounterSetting/CounterSetting';\nimport CounterDisplay from './components/CounterDisplay/CounterDisplay';\n\nfunction App() {\n\n  const dispatch = useDispatch();\n  const [text, setText] = useState('');\n\n  const {error} = useSelector<RootStateType, InitialStateType>(state => state.counter);\n\n  useEffect(() => {\n    \n  }, []);\n\n  useEffect(() => {\n    (error) ? setText(' Invalid values !') : setText('Enter values & press \"SET\"')\n  }, [error]);\n\n  const incButtonHandler = () => {\n    dispatch(actionCreators.IncrementAC())\n    console.log('increment tab')\n  };\n\n  const recButtonHandler = () => {\n    dispatch(actionCreators.ResetAC())\n    console.log('reset tab')\n  };\n\n\n  return (\n    <div className={style.app}>\n    <CounterSetting />\n      <CounterDisplay text={text}\n        incButtonHandler={incButtonHandler}\n        recButtonHandler={recButtonHandler} />\n    </div>\n  );\n}\n\nexport default App;\n","import {createStore, combineReducers} from 'redux';\r\nimport { loadState, saveState } from '../utils/localStorage';\r\nimport { counterReducer } from './counterReducer';\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    counter: counterReducer\r\n });\r\n\r\nexport const store = createStore(rootReducer, loadState());\r\n\r\nstore.subscribe(() => {\r\n    saveState({\r\n      counter: store.getState().counter\r\n    });\r\n});\r\n\r\nexport type RootStateType = ReturnType<typeof rootReducer>;\r\n\r\n // @ts-ignore\r\nwindow.store = store","import { RootStateType } from \"../store/store\";\r\n\r\n\r\nexport const loadState = () => {\r\n    try {\r\n      const serializedState = localStorage.getItem('state');\r\n      if (serializedState) {\r\n        return JSON.parse(serializedState);\r\n      }\r\n    } catch (err) {\r\n      return undefined;\r\n    }\r\n}; \r\n\r\nexport const saveState = (state: RootStateType) => {\r\n    try {\r\n      const serializedState = JSON.stringify(state);\r\n      localStorage.setItem('state', serializedState);\r\n    } catch {\r\n      // ignore write errors\r\n    }\r\n  };","import './index.css';\nimport App from './App';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { store } from './store/store';\nimport { Provider } from 'react-redux';\n\n\n\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"window1st\":\"counter_window1st__1r2ZZ\",\"window2nd\":\"counter_window2nd__1G4MX\",\"counterDisplay\":\"counter_counterDisplay__f1vrG\",\"counterDisplayError\":\"counter_counterDisplayError__3j68U\",\"counterBottom\":\"counter_counterBottom__PBHHG\"};"],"sourceRoot":""}